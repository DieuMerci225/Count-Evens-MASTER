{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "L01: Greedy.ipynb",
      "provenance": [],
      "history_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DieuMerci225/Count-Evens-MASTER/blob/master/L01_nshizirungud\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ws6rXa1xv_gv"
      },
      "source": [
        "# [L01: Implementing Greedy TSP](https://docs.google.com/document/d/1JA_CWBXPN6whvJAemnJLvtYJ3Pbk84dTUolWO_QqosA/edit?usp=sharing)\n",
        "Written by Dr. Jan Pearce, Berea College\n",
        "\n",
        "Complete the code by meeting all linked requirements and fixing all FIXMEs\n",
        "\n",
        "## Your Name: DieuMerci Nshizirungu\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PvEpt0HPKq9X"
      },
      "source": [
        "**SUMMARY**: A brief summary description of the design and implementation, including how much your initial design plan evolved, the final result you achieved and the amount of time you spent as a programmer or programmers in accomplishing these results. This should be no more than two paragraphs.\n",
        "\n",
        "made a greedy Traveling Salesperson (TSP) program in Python using NetworkX. The program reads the file tsp-small.txt, saves the city coordinates, and then makes a tour by always going to the closest city that has not been visited yet, until all cities are visited and it returns to the start. I kept the code easy to follow with basic loops and simple distance math. My plan was just to get one route working from a starting city, and I stuck with that. I also added a way to print the tour in the same format as the input file and made the graph show the route and edge weights so I could see that it worked.\n",
        "\n",
        "**PERSONNEL**: A description of who you worked with and on what sections.  It is expected that all collaboration is done as pair programming together. Also, note these collaborations in the code section itself.\n",
        "\n",
        "I worked alone.\n",
        "\n",
        "**CHALLENGES**: Descriptions of the largest challenges you overcame and what made them challenging.\n",
        "\n",
        "One challenge I faced was understanding how to correctly load the input file. At first, I passed the raw contents instead of the file base name into extractData, which gave me URL errors until I fixed it. Another challenge was keeping the function signature for getRoute (current, visits, nVisits, needList) as required by the assignment while still keeping the inside logic simple. I also had to be careful with node IDs to make sure they matched consistently as 0..N-1 across coords, the graph, and the route; otherwise I would run into KeyErrors. Finally, I had to double-check that I always removed the selected city from the unvisited list so the algorithm never revisited a node before returning to the start.\n",
        "\n",
        "**INNOVATIONS**: Any innovations that were not specifically required by the assignment. These are not required, but should be highlighted if included.\n",
        "\n",
        "For this lab I added a few small things that were not required but made the program easier to use. I rounded the edge weights on the graph so the labels look cleaner and are easier to read. I also cleared out the data lists and the graph before rebuilding them, so the program can be re-run without errors or leftover data. Finally, in my main() I printed extra information like the number of nodes, the first node’s data, a sample distance, and the full route with its cost. These steps were not part of the directions, but they helped me double check that my code was working the way I wanted.\n",
        "\n",
        "**TESTING**: Describe how you tested this work.\n",
        "\n",
        "\n",
        "**ERRORS**: A list in bulleted form of all known errors and deficiencies.\n",
        "\n",
        "InvalidURL                                Traceback (most recent call last)\n",
        "/tmp/ipython-input-1797465426.py in <cell line: 0>()\n",
        "    140\n",
        "f\"(found at least {match.group()!r})\")\n",
        "TypeError: 'tuple' object is not callable\n",
        "KeyError: 0\n",
        "\n",
        "I tested each method at every point. As I calculated greedily, additionally, I used print statements to check all the considered paths and ensure the shortest was consistently checked.\n",
        "\n",
        "**COMMENTS**: A paragraph or so of your own comments on and reactions to the Lab.\n",
        "\n",
        "This lab helped me practice core Python skills lists, sets, dictionaries, loops and see how a greedy heuristic works end-to-end. Drawing the graph with edge weights was especially helpful for checking if the tour made sense. If I extend this, I’d try multiple starting cities and compare their total costs, but for now I focused on getting a clear, correct, and readable single-start greedy solution. Great exercise"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wNuaUKpqtBkR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "pGKl773gtJh5"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lRXe-Atyv30H"
      },
      "source": [
        "## Import Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b6koAGG2mhix"
      },
      "source": [
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "from urllib.request import urlopen"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GzeEKA-nwLsJ",
        "outputId": "df7604e8-daa7-4b29-93a0-16abb430923d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "tspdata = urlopen(\"http://cs.berea.edu/courses/csc445/data/tsp-small.txt\").read().decode('ASCII')\n",
        "print(tspdata)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\r\n",
            "1 5 \r\n",
            "3 7 \r\n",
            "5 11 \r\n",
            "3 5 \r\n",
            "5 7 \r\n",
            "7 9 \r\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qGcB5022KlHL"
      },
      "source": [
        "## TSP Class"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KIzVOICElISX",
        "outputId": "785f740d-725a-4146-8451-5d85d0e17ba8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 568
        },
        "collapsed": true
      },
      "source": [
        "\"\"\"\n",
        "\n",
        "Given certain input, it uses the greedy algorithm to plot a graph and output a file of the solution path\n",
        "\"\"\"\n",
        "\n",
        "class TSP:\n",
        "\n",
        "    def __init__(self):\n",
        "        \"\"\" TSP class containing data needed for networkx graph creation, file reading and file writing.\n",
        "            Creates a graph for the traveling salesperon problem using the greedy algorithm\n",
        "        \"\"\"\n",
        "\n",
        "        self.dimension = None\n",
        "        self.nodeData = []\n",
        "        self.graph = nx.DiGraph()\n",
        "        self.coords = {}\n",
        "        self.places = []\n",
        "        self.route = []\n",
        "\n",
        "\n",
        "    def extractData(self, inputFile=\"\"):\n",
        "        \"\"\"\n",
        "        Itterate through the input file and append each coordinate into the node list.\n",
        "        Keyword Arguments:\n",
        "            inputFile {str} -- a string for the file name (default: {\"\"})\n",
        "        \"\"\"\n",
        "        file_path = urlopen(f\"http://cs.berea.edu/courses/csc445/data/{inputFile}.txt\")\n",
        "        lines = file_path.read().decode(\"ASCII\").strip().splitlines()\n",
        "        self.dimension = int(lines[0])\n",
        "        self.nodeData = [] # Clear nodeData before appending\n",
        "        for line in lines[1:1+self.dimension]:\n",
        "            x, y = map(int, line.split())\n",
        "            self.nodeData.append([x,y])\n",
        "\n",
        "\n",
        "    def setUpCoords(self):\n",
        "        \"\"\" Puts the coordinates for each node into a dictionary as a tuple with the node as the key \"\"\"\n",
        "\n",
        "        self.coords = {} # Clear coords before setting up\n",
        "        for i, coords in enumerate(self.nodeData):\n",
        "            self.coords[i] = (coords[0], coords[1])\n",
        "\n",
        "    def calculateDistance(self, a, b):\n",
        "        \"\"\"calculates & returns the distance between points a and b\n",
        "        Arguments:\n",
        "            a {[tuple]} -- tuple of numbers for the x and y coordinate of a node\n",
        "            b {[tuple]} -- tuple of numbers for the x and y coordinate of a node\n",
        "        Returns:\n",
        "            [float] -- the distance between the two points using the distance formula\n",
        "        \"\"\"\n",
        "\n",
        "        delta_x, delta_y = a[0] - b[0], b[1] - a[1]\n",
        "        x_squared, y_squared = delta_x ** 2, delta_y ** 2\n",
        "        difference_squared = x_squared + y_squared\n",
        "\n",
        "        return difference_squared ** 0.5\n",
        "\n",
        "    def getRoute(self, current, visits=[], nVisits=[], needList=True):\n",
        "        \"\"\"Makes a list of the nodes to be visited, in order, according to the greedy alogorithm for the TSP\n",
        "        Arguments:\n",
        "            current {int} -- the node to start at, not a list index\n",
        "        Keyword Arguments:\n",
        "            visits {list} -- list of places already visited (default: {[]})\n",
        "            nVisits {list} -- list of places not visited (default: {[]})\n",
        "            needList {bool} -- boolean deciding if the list of places not visited needs to be filled (default: {True})\n",
        "        \"\"\"\n",
        "        if needList:\n",
        "            nVisits = list(self.coords.keys())\n",
        "            if current in nVisits:\n",
        "                nVisits.remove(current)\n",
        "\n",
        "        route = [current]\n",
        "        total_cost = 0\n",
        "        while nVisits:\n",
        "                # trying to find the closest neighbor\n",
        "            closest_node= None\n",
        "            closest_distance = float(\"inf\")\n",
        "            for node in nVisits:\n",
        "                d = self.calculateDistance(self.coords[current],self.coords[node])\n",
        "                if d < closest_distance:\n",
        "                    closest_distance = d\n",
        "                    closest_node = node\n",
        "\n",
        "              # trying to move to that close city(neighbor)\n",
        "            route.append(closest_node)\n",
        "            total_cost += closest_distance\n",
        "            current = closest_node\n",
        "            nVisits.remove(closest_node)\n",
        "\n",
        "        total_cost += self.calculateDistance(self.coords[current], self.coords[route[0]])\n",
        "        route.append(route[0])\n",
        "        return route, total_cost\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "    def beGreedy(self, start):\n",
        "        \"\"\" puts together the greedy algorithm. Gets the route order and adds the starting place to the end of the route\n",
        "        Arguments:\n",
        "            start -- the starting node for the greedy algorithm\n",
        "        \"\"\"\n",
        "        self.route, self.total_cost = self.getRoute(start)\n",
        "\n",
        "\n",
        "    def listPlaces(self):\n",
        "        \"\"\"makes a list of all the nodes/places from the dictionary\n",
        "        Returns:\n",
        "            [list] -- list of all the nodes/places\n",
        "        \"\"\"\n",
        "        return list(self.coords.keys())\n",
        "\n",
        "\n",
        "    def cleanUpList(self, visited, notVisited):\n",
        "        \"\"\"removes items in visited from notVisited\n",
        "        Arguments:\n",
        "            visited {list}\n",
        "            notVisited {list}\n",
        "        Returns:\n",
        "            [list] -- a list of notVisited - visited\n",
        "        \"\"\"\n",
        "\n",
        "        for item in visited:\n",
        "            if item in notVisited:\n",
        "                notVisited.remove(item)\n",
        "        return notVisited\n",
        "\n",
        "    def addNodes(self):\n",
        "        \"\"\" adds nodes to the networkx graph\n",
        "        \"\"\"\n",
        "        self.graph.clear() # Clear graph before adding nodes\n",
        "        for node, coords in self.coords.items(): # Corrected loop\n",
        "            self.graph.add_node(node, pos=coords)\n",
        "\n",
        "    def addEdges(self):\n",
        "        \"\"\"Adds graphs to the networkx graph\n",
        "        \"\"\"\n",
        "        # No need to clear edges, addNodes clears the graph\n",
        "        x = 0\n",
        "        while x < len(self.route)-1:\n",
        "            self.graph.add_edge(self.route[x], self.route[x+1],\n",
        "                                weight=round(self.calculateDistance(self.coords[self.route[x]], self.coords[self.route[x+1]]), 2)) # Added rounding for display\n",
        "            x += 1\n",
        "\n",
        "    def showGraph(self):\n",
        "        \"\"\"Uses the imported libraries to display the graph\n",
        "        \"\"\"\n",
        "        # get labels and coordinates for the graph\n",
        "        coords = nx.get_node_attributes(self.graph, 'pos')\n",
        "        labels = nx.get_edge_attributes(self.graph, 'weight')\n",
        "        # draw nodes in their coordinates\n",
        "        nx.draw(self.graph, coords, with_labels=True) # Added with_labels=True\n",
        "        # nx.draw_networkx_labels(self.graph, coords) # This is redundant with with_labels=True\n",
        "        # draw edges with their weights\n",
        "        nx.draw_networkx_edge_labels(self.graph, coords, edge_labels=labels)\n",
        "        plt.show()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def main():\n",
        "    tsp = TSP()\n",
        "\n",
        "    tsp.extractData(\"tsp-small\")\n",
        "    tsp.setUpCoords()\n",
        "    tsp.addNodes()\n",
        "    tsp.beGreedy(0)\n",
        "    tsp.addEdges()\n",
        "    tsp.showGraph()\n",
        "\n",
        "\n",
        "    print(f\"Dimension: {tsp.dimension}\")\n",
        "    print(f\"Number of nodes: {len(tsp.nodeData)}\")\n",
        "    print(f\"First node data: {tsp.nodeData[0]}\")\n",
        "    print (f\"Distance between (0,0) and (3,4): {tsp.calculateDistance((0,0),(3,4))}\")\n",
        "    route, cost = tsp.getRoute(0)\n",
        "    print(f\"Route starting from node 0: {route}\")\n",
        "    print(f\"Total cost for the route starting from node 0: {cost}\")\n",
        "\n",
        "\n",
        "main()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimension: 6\n",
            "Number of nodes: 6\n",
            "First node data: [1, 5]\n",
            "Distance between (0,0) and (3,4): 5.0\n",
            "Route starting from node 0: [0, 3, 1, 4, 5, 2, 0]\n",
            "Total cost for the route starting from node 0: 18.86795680042036\n"
          ]
        }
      ]
    }
  ]
}